#!/bin/bash
set -euo pipefail

PLUGIN_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)/.."

rm -rf /tmp/service_account.json
PIPELINE_FILE="/tmp/service_account.json"

debug_mode="false"
if [[ ${BUILDKITE_PLUGIN_CLOUD_FUNCTIONS_DEBUG_MODE:-false} =~ (true|on|1) ]]; then
	echo "--- :hammer: Enabling debug mode"
	debug_mode="true"
fi

workdir="/workdir"

default_image="python:3.9.7-buster"
image="${BUILDKITE_PLUGIN_CLOUD_FUNCTIONS_CUSTOM_IMAGE:-$default_image}"

if [ -z "$BUILDKITE_PLUGIN_CLOUD_FUNCTIONS_GCP_PROJECT" ]; then
	echo "ERROR: gcp project (gcp_project) key not set"
	exit 1
fi

gcp_project="${BUILDKITE_PLUGIN_CLOUD_FUNCTIONS_GCP_PROJECT}"

if [ -z "${BUILDKITE_PLUGIN_CLOUD_FUNCTIONS_GCP_REGION}" ]; then
	echo "ERROR: gcp region (gcp_region) not set"
	exit 1
fi

gcp_region="${BUILDKITE_PLUGIN_CLOUD_FUNCTIONS_GCP_REGION}"

if [ -z "${BUILDKITE_PLUGIN_CLOUD_FUNCTIONS_CLOUD_FUNCTION_NAME}" ]; then
	echo "ERROR: cloud function name (cloud_function_name) not set"
	exit 1
fi

cloud_function_name="${BUILDKITE_PLUGIN_CLOUD_FUNCTIONS_CLOUD_FUNCTION_DIRECTORY}"

if [ -z "${BUILDKITE_PLUGIN_CLOUD_FUNCTIONS_CLOUD_FUNCTION_DIRECTORY}" ]; then
	echo "ERROR: cloud function directory (cloud_function_directory) not set"
	exit 1
fi

cloud_functions_directory="${BUILDKITE_PLUGIN_CLOUD_FUNCTIONS_CLOUD_FUNCTION_DIRECTORY}"

if [ -z "${gcp_service_account}" ]; then
	echo "ERROR: gcp service account (gcp_service_account) not set"
	exit 1
fi

echo "$gcp_service_account" >"$PIPELINE_FILE"

if [[ ${debug_mode} == "true" ]]; then
	echo "Configuration:"
	echo "GCP Project: ${gcp_project}"
	echo "GCP Region: ${gcp_region}"
	echo "Cloud Function Name: ${cloud_function_name}"
	echo "Cloud Function Directory: ${cloud_functions_directory}"
	echo "Docker Image: ${image}"
fi

args=("-it" "--rm" "--init" "--workdir" "${workdir}")

# Propagate all environment variables into the container
if [[ -n ${BUILDKITE_ENV_FILE:-} ]]; then
	# Read in the env file and convert to --env params for docker
	# This is because --env-file doesn't support newlines or quotes per https://docs.docker.com/compose/env-file/#syntax-rules
	while read -r var; do
		args+=(--env "${var%%=*}")
	done <"$BUILDKITE_ENV_FILE"
else
	echo 'ðŸš¨ Not propagating environment variables to container as $BUILDKITE_ENV_FILE is not set'
fi

# Mount the buildkite-agent
if [[ -z ${BUILDKITE_AGENT_BINARY_PATH:-} ]]; then
	if ! command -v buildkite-agent >/dev/null 2>&1; then
		echo "+++ ðŸš¨ Failed to find buildkite-agent in PATH to mount into container"
		exit 1
	else
		BUILDKITE_AGENT_BINARY_PATH=$(command -v buildkite-agent)
	fi
fi
args+=(
	"--env" "BUILDKITE_JOB_ID"
	"--env" "BUILDKITE_BUILD_ID"
	"--env" "BUILDKITE_AGENT_ACCESS_TOKEN"
	"--env" "gcp_project=$gcp_project"
	"--env" "gcp_region=$gcp_region"
	"--env" "cloud_function_name=$cloud_function_name"
	"--env" "cloud_functions_directory=$cloud_functions_directory"
	"--env" "credentials=$(</tmp/service_account.json)"
	"--volume" "$BUILDKITE_AGENT_BINARY_PATH:/usr/bin/buildkite-agent"
)

# Add the image in before the shell and command
args+=("${image}")

# Assemble the shell and command arguments into the docker arguments
command=()
display_command=()

shell=("/bin/sh" "-e" "-c")
args+=("${shell[@]}")
display_command+=("${shell[@]}")
command+=("pip -q install -r plugin_scripts/requirements.lock && python plugin_scripts/deploy.py")

# join command lines
command_string="$(
	IFS=$'\n'
	echo "${command[*]}"
)"

args+=("${command_string}")
display_command+=("'${command_string}'")

echo '--- :docker: Logging "docker create" command'
echo "$ docker create" >&2

echo "--- :docker: Running command in ${image}"
echo "$ ${display_command[*]}" >&2

if [[ ${debug_mode} == "true" ]]; then
	echo "docker create" >&2
	echo "docker cp \"${PWD}/.\" \"dockerContainerID:${workdir}\"" >&2
fi

# # For copy-checkout, we have to `docker create`, then `docker cp "${PWD}:${workdir}"`, then `docker start`
DOCKERID=$(docker create "${args[@]}") # substitute any backticks
docker cp "${PWD}/." "${DOCKERID}:${workdir}"
docker cp "${PLUGIN_DIR}/plugin_scripts" "${DOCKERID}:${workdir}/plugin_scripts"
docker start -a "${DOCKERID}"
